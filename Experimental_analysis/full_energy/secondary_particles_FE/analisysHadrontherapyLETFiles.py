"""
    For  additional questions or comments, please contact the authors:
    p.r.rajka@gmail.com (Rajka Pejanovic) and 
    pablo.cirrone@cern.ch (Pablo Cirrone)
"""

# ========================

from scipy import stats
import scipy.stats.distributions
import matplotlib.pyplot as plt

import numpy
import numpy as np
import os
import math

# pandas libraries are useful to read a text file like cvs.
import pandas as pd

# To use matlab functions
import matplotlib.mlab as mlab
import matplotlib
matplotlib.get_backend()
# To perform polynomial fit
import numpy.polynomial.polynomial as poly

# To integrate funtions and vectors
import scipy.integrate as integrate

from usefulFunctions import getColumns

voxelSizeX = 0.1  # mm
voxelSizeY = 0.1  # mm
voxelSizeZ = 0.1  # mm


# Read the file Let.out generated by the Hadrontherapy application with Binary physics list
#
#file_LET_Binary = open("MC_Data/MC_He4_SOBP_Let_Binary_1e7_cleaned.txt", 'r')
file_LET_Binary = open("Let1m.out", 'r')
cols_LET_Binary, indexToName_LET_Binary = getColumns(file_LET_Binary)
file_LET_Binary.close()

# Number of columns that must be read
#
numberOfColumns_LET_Binary = len(indexToName_LET_Binary)

# The string of each column is retrived in a for loop
#
columnsHeaderFull_LET_Binary = {}
columnsContentFull_LET_Binary = {}

for i in range(0, numberOfColumns_LET_Binary):
    # Vector containing all the header strings
    #
    header_LET_Binary = indexToName_LET_Binary[i]
    columnsHeaderFull_LET_Binary[i] = header_LET_Binary

    # Vector containing all the columns with data
    #
    columnsContent_LET_Binary = cols_LET_Binary[columnsHeaderFull_LET_Binary[i]]
    columnsContentArray_LET_Binary = np.array(columnsContent_LET_Binary)
    columnsContentArrayNumber_LET_Binary = columnsContentArray_LET_Binary.astype(np.float)

    columnsContentFull_LET_Binary[i] = columnsContentArrayNumber_LET_Binary

depthX_Binary = columnsContentFull_LET_Binary[0] * voxelSizeX
depthY_Binary = columnsContentFull_LET_Binary[1] * voxelSizeY
depthZ_Binary = columnsContentFull_LET_Binary[2] * voxelSizeZ



LET_Dose_Total_Binary = columnsContentFull_LET_Binary[3]
LET_Track_Total_Binary = columnsContentFull_LET_Binary[4]



figure10 = plt.figure(10, figsize=(14, 10))
#plt.plot(depthX_PHP, LET_Track_Total_PHP,  label = ' LET Track Total PHP')
plt.plot(depthX_Binary, LET_Dose_Total_Binary,  label = ' LET Dose Total', color='b')
plt.title('LET total Dose from Hadrontherapy application')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
#plt.legend(fontsize=14, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.legend(fontsize = 14)
plt.draw()


# Plot the LET track Total for both physics (PHP and Binary)
figure11 = plt.figure(11, figsize=(14, 10))
#plt.plot(depthX_Binary, LET_Dose_Total_Binary,  label = ' LET Dose Total Binary')
plt.plot(depthX_Binary, LET_Track_Total_Binary,  label = ' LET Track Total', color='b')

plt.title('LET total track from Hadrontherapy application')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
#plt.legend(fontsize=14, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.legend(fontsize = 14)
plt.show(block=False)


# LET Dose of single ion - Binary
#
figure31 = plt.figure(31, figsize=(14, 10))
for k in range(3, numberOfColumns_LET_Binary, 2):
        plt.semilogy(depthX_Binary, columnsContentFull_LET_Binary[k], '*', markersize=4,
                     label='Binary ' + columnsHeaderFull_LET_Binary[k])

plt.title('LET Dose of secondaries for all ions')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
plt.legend(fontsize = 13, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.draw()


# LET Track of single ion in physics- Binary
#
figure41 = plt.figure(41, figsize=(14, 10))
for k in range(4, numberOfColumns_LET_Binary, 2):
        plt.semilogy(depthX_Binary, columnsContentFull_LET_Binary[k], '*', markersize=4,
                     label='Binary ' + columnsHeaderFull_LET_Binary[k])

plt.title('LET total Track and LET of secondaries')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
plt.legend(fontsize = 13, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.show(block=False)


# creo i vettori degli elementi con la somma dei vari isotopi (Binary physics)
Hydrogen_list = ['proton_D','deuteron_D','triton_D','H4_D','H5_D','H6_D','H7_D','H8_D','H9_D','H10_D','H11_D']
print(columnsHeaderFull_LET_Binary.values())
Helium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "He" in s and "_D" in s]
Helium_list += ['alpha_D']
Lithium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Li" in s and "_D" in s]
Beryllium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Be" in s and "_D" in s]
Borum_list = [s for s in columnsHeaderFull_LET_Binary.values() if "B" in s and "_D" in s and "Be" not in s]
Carbon_list = [s for s in columnsHeaderFull_LET_Binary.values() if "C" in s and "_D" in s]
Nitrogen_list = [s for s in columnsHeaderFull_LET_Binary.values() if "N" in s and "_D" in s and "Ne" not in s and "Na" not in s]
Oxygen_list = [s for s in columnsHeaderFull_LET_Binary.values() if "O" in s and "_D" in s]
Fluorine_list = [s for s in columnsHeaderFull_LET_Binary.values() if "F" in s and "_D" in s]
Neon_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Ne" in s and "_D" in s]
Sodium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Na" in s and "_D" in s]
Magnesium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Mg" in s and "_D" in s]
Aluminium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Al" in s and "_D" in s]
Silicon_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Si" in s and "_D" in s]
Sulfur_list = [s for s in columnsHeaderFull_LET_Binary.values() if "S" in s and "_D" in s and "Si" not in s]

print(Hydrogen_list)
print(Helium_list)
print(Lithium_list)
print(Beryllium_list)
print(Borum_list)
print(Carbon_list)
print(Nitrogen_list)
print(Oxygen_list)
print(Fluorine_list)
print(Neon_list)
print(Sodium_list)
print(Magnesium_list)
print(Aluminium_list)
#print(Silicon_list)
#print(Sulfur_list)

Hydrogen_Binary = [0]*len(depthX_Binary)
Helium_Binary = [0]*len(depthX_Binary)
Lithium_Binary = [0]*len(depthX_Binary)
Beryllium_Binary = [0]*len(depthX_Binary)
Borum_Binary = [0]*len(depthX_Binary)
Carbon_Binary = [0]*len(depthX_Binary)
Nitrogen_Binary = [0]*len(depthX_Binary)
Oxygen_Binary = [0]*len(depthX_Binary)
Fluorine_Binary = [0]*len(depthX_Binary)
Neon_Binary = [0]*len(depthX_Binary)
Sodium_Binary = [0]*len(depthX_Binary)
Magnesium_Binary = [0]*len(depthX_Binary)
Aluminium_Binary = [0]*len(depthX_Binary)
Silicon_Binary = [0]*len(depthX_Binary)
Sulfur_Binary = [0]*len(depthX_Binary)
for i in range(1,numberOfColumns_LET_Binary,2):
    if columnsHeaderFull_LET_Binary[i] in Hydrogen_list:
        Hydrogen_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Helium_list:
        Helium_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Lithium_list:
        Lithium_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Beryllium_list:
        Beryllium_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Borum_list:
        Borum_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Carbon_list:
        Carbon_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Nitrogen_list:
        Nitrogen_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Oxygen_list:
        Oxygen_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Fluorine_list:
        Fluorine_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Neon_list:
        Neon_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Sodium_list:
        Sodium_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Magnesium_list:
        Magnesium_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Aluminium_list:
        Aluminium_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Silicon_list:
        Silicon_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Sulfur_list:
        Sulfur_Binary += columnsContentFull_LET_Binary[i]

"""
print(Hydrogen_Binary[0:10])
print(Hydrogen_Binary[50:90])
print(Hydrogen_Binary[120:130])
print(Hydrogen_Binary[390:])

print(Fluorine_Binary[0:10])
print(Fluorine_Binary[50:90])
print(Fluorine_Binary[120:130])
print(Fluorine_Binary[390:])"""

figure51, ax = plt.subplots(figsize=(14, 10))

ax.plot(depthX_Binary, Hydrogen_Binary,label='Binary_Hydrogen', color='C0')
ax.plot(depthX_Binary, Helium_Binary,label='Binary_Helium', color='C1')
ax.plot(depthX_Binary, Lithium_Binary,label='Binary_Lithium',  color='C2')
ax.plot(depthX_Binary, Beryllium_Binary,label='Binary_Beryllium',  color='C3')
ax.plot(depthX_Binary, Borum_Binary,label='Binary_Borum',  color='C4')
ax.plot(depthX_Binary, Carbon_Binary,label='Binary_Carbon',  color='C5')
ax.plot(depthX_Binary, Nitrogen_Binary,label='Binary_Nitrogen', color='C6')
ax.plot(depthX_Binary, Oxygen_Binary,label='Binary_Oxygen',  color='C7')
ax.plot(depthX_Binary, Fluorine_Binary,label='Binary_Fluorine', color='C8')
ax.plot(depthX_Binary, Neon_Binary,label='Binary_Neon', color='C9')

plt.title('LET Dose of secondaries (no primaries) grouped by element')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
plt.legend(fontsize = 13, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.draw()


figure60, ax = plt.subplots(figsize=(14, 10))

ax.plot(depthX_Binary, Hydrogen_Binary,label='Binary_Hydrogen', linestyle='solid', color='C0')
ax.plot(depthX_Binary, Helium_Binary,label='Binary_Helium', linestyle='solid', color='C1')
plt.title('LET Dose of secondaries for H and He(secondaries) with Binary Physics (dashed line)')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
plt.legend(fontsize = 13, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.draw()

figure61, ax = plt.subplots(figsize=(14, 10))

ax.plot(depthX_Binary, Lithium_Binary,label='Binary_Lithium', linestyle='solid', color='C2')
ax.plot(depthX_Binary, Beryllium_Binary,label='Binary_Beryllium', linestyle='solid', color='C3')
ax.plot(depthX_Binary, Borum_Binary,label='Binary_Borum', linestyle='solid', color='C4')
ax.plot(depthX_Binary, Carbon_Binary,label='Binary_Carbon', linestyle='solid', color='C5')
plt.title('LET Dose of secondaries for Li, Be, B, C with Binary Physics (dashed line)')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
plt.legend(fontsize = 13, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.draw()

figure62, ax = plt.subplots(figsize=(14, 10))
ax.plot(depthX_Binary, Nitrogen_Binary,label='Binary_Nitrogen', linestyle='solid', color='C6')
ax.plot(depthX_Binary, Oxygen_Binary,label='Binary_Oxygen', linestyle='solid', color='C7')
ax.plot(depthX_Binary, Fluorine_Binary,label='Binary_Fluorine', linestyle='solid', color='C8')
ax.plot(depthX_Binary, Neon_Binary,label='Binary_Neon', linestyle='solid', color='C9')
plt.title('LET Dose of secondaries for N, O, F, Ne with Binary Physics (dashed line)')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
plt.legend(fontsize = 13, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.draw()


# creo i vettori degli elementi con la somma dei vari isotopi (Binary physics)
Hydrogen_list = ['proton_T','deuteron_T','triton_T','H4_T','H5_T','H6_T','H7_T','H8_T','H9_T','H10_T','H11_T']
# print(columnsHeaderFull_LET_Binary.values())
Helium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "He" in s and "_T" in s]
Helium_list += ['alpha_T']
Lithium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Li" in s and "_T" in s]
Beryllium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Be" in s and "_T" in s]
Borum_list = [s for s in columnsHeaderFull_LET_Binary.values() if "B" in s and "_T" in s and "Be" not in s]
Carbon_list = [s for s in columnsHeaderFull_LET_Binary.values() if "C" in s and "_T" in s]
Nitrogen_list = [s for s in columnsHeaderFull_LET_Binary.values() if "N" in s and "_T" in s and "Ne" not in s and "Na" not in s]
Oxygen_list = [s for s in columnsHeaderFull_LET_Binary.values() if "O" in s and "_T" in s]
Fluorine_list = [s for s in columnsHeaderFull_LET_Binary.values() if "F" in s and "_T" in s]
Neon_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Ne" in s and "_T" in s]
Sodium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Na" in s and "_T" in s]
Magnesium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Mg" in s and "_T" in s]
Aluminium_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Al" in s and "_T" in s]
Silicon_list = [s for s in columnsHeaderFull_LET_Binary.values() if "Si" in s and "_T" in s]
Sulfur_list = [s for s in columnsHeaderFull_LET_Binary.values() if "S" in s and "_T" in s and "Si" not in s]

Hydrogen_T_Binary = [0]*len(depthX_Binary)
Helium_T_Binary = [0]*len(depthX_Binary)
Lithium_T_Binary = [0]*len(depthX_Binary)
Beryllium_T_Binary = [0]*len(depthX_Binary)
Borum_T_Binary = [0]*len(depthX_Binary)
Carbon_T_Binary = [0]*len(depthX_Binary)
Nitrogen_T_Binary = [0]*len(depthX_Binary)
Oxygen_T_Binary = [0]*len(depthX_Binary)
Fluorine_T_Binary = [0]*len(depthX_Binary)
Neon_T_Binary = [0]*len(depthX_Binary)
Sodium_T_Binary = [0]*len(depthX_Binary)
Magnesium_T_Binary = [0]*len(depthX_Binary)
Aluminium_T_Binary = [0]*len(depthX_Binary)
Silicon_T_Binary = [0]*len(depthX_Binary)
Sulfur_T_Binary = [0]*len(depthX_Binary)
for i in range(2,numberOfColumns_LET_Binary,2):
    if columnsHeaderFull_LET_Binary[i] in Hydrogen_list:
        Hydrogen_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Helium_list:
        Helium_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Lithium_list:
        Lithium_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Beryllium_list:
        Beryllium_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Borum_list:
        Borum_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Carbon_list:
        Carbon_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Nitrogen_list:
        Nitrogen_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Oxygen_list:
        Oxygen_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Fluorine_list:
        Fluorine_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Neon_list:
        Neon_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Sodium_list:
        Sodium_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Magnesium_list:
        Magnesium_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Aluminium_list:
        Aluminium_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Silicon_list:
        Silicon_T_Binary += columnsContentFull_LET_Binary[i]
    if columnsHeaderFull_LET_Binary[i] in Sulfur_list:
        Sulfur_T_Binary += columnsContentFull_LET_Binary[i]

figure60, ax = plt.subplots(figsize=(14, 10))

ax.plot(depthX_Binary, Hydrogen_T_Binary,label='Binary_Hydrogen', color='C0')
ax.plot(depthX_Binary, Helium_T_Binary,label='Binary_Helium', color='C1')
ax.plot(depthX_Binary, Lithium_T_Binary,label='Binary_Lithium',  color='C2')
ax.plot(depthX_Binary, Beryllium_T_Binary,label='Binary_Beryllium',  color='C3')
ax.plot(depthX_Binary, Borum_T_Binary,label='Binary_Borum', color='C4')
ax.plot(depthX_Binary, Carbon_T_Binary,label='Binary_Carbon',  color='C5')
ax.plot(depthX_Binary, Nitrogen_T_Binary,label='Binary_Nitrogen', color='C6')
ax.plot(depthX_Binary, Oxygen_T_Binary,label='Binary_Oxygen', color='C7')
ax.plot(depthX_Binary, Fluorine_T_Binary,label='Binary_Fluorine',  color='C8')
ax.plot(depthX_Binary, Neon_T_Binary,label='Binary_Neon',  color='C9')

plt.title('LET Total track of secondaries (no primaries) grouped by element')
plt.xlabel('Depth in water [ mm ]')
plt.ylabel('LET [ keV/um ]')
plt.legend(fontsize = 13, loc='upper left',bbox_to_anchor=(1, 1.05), prop={'size':6})
plt.draw()


plt.show()


# Read the file Dose.out generated by the Hadrontherapy application with Binary physics list
#file_dose_Binary = open("MC_Data/MC_He4_SOBP_Dose_Binary_1e7.out", 'r')
file_dose_Binary = open("Dose.out", 'r')
cols_dose_Binary, indexToName_dose_Binary = getColumns(file_dose_Binary)
file_dose_Binary.close()

# Number of columns that must be read
#
numberOfColumns_dose_Binary = len(indexToName_dose_Binary)

# The string of each column is retrived in a for loop
#
columnsHeaderFull_dose_Binary = {}
columnsContentFull_dose_Binary = {}

for i in range(0, numberOfColumns_dose_Binary):
    # Vector containing all the header strings
    #
    header_dose_Binary = indexToName_dose_Binary[i]
    columnsHeaderFull_dose_Binary[i] = header_dose_Binary

    # Vector containing all the columns with data
    #
    columnsContent_dose_Binary = cols_dose_Binary[columnsHeaderFull_dose_Binary[i]]
    columnsContentArray_dose_Binary = np.array(columnsContent_dose_Binary)
    columnsContentArrayNumber_dose_Binary = columnsContentArray_dose_Binary.astype(np.float)

    columnsContentFull_dose_Binary[i] = columnsContentArrayNumber_dose_Binary

depthX_dose_Binary = columnsContentFull_dose_Binary[0] * voxelSizeX
depthY_dose_Binary = columnsContentFull_dose_Binary[1] * voxelSizeY
depthZ_dose_Binary = columnsContentFull_dose_Binary[2] * voxelSizeZ


Hydrogen_list = ['proton_f','deuteron_f','triton_f','H4_f','H5_f','H6_f','H7_f','H8_f','H9_f','H10_f','H11_f']
Helium_list = [s for s in columnsHeaderFull_dose_Binary.values() if "He" in s and "_f" in s]
Helium_list += ['alpha_f']
Lithium_list = [s for s in columnsHeaderFull_dose_Binary.values() if "Li" in s and "_f" in s]
Beryllium_list = [s for s in columnsHeaderFull_dose_Binary.values() if "Be" in s and "_f" in s]
Borum_list = [s for s in columnsHeaderFull_dose_Binary.values() if "B" in s and "_f" in s and "Be" not in s]
Carbon_list = [s for s in columnsHeaderFull_dose_Binary.values() if "C" in s and "_f" in s]
Nitrogen_list = [s for s in columnsHeaderFull_dose_Binary.values() if "N" in s and "_f" in s and "Ne" not in s and "Na" not in s]
Oxygen_list = [s for s in columnsHeaderFull_dose_Binary.values() if "O" in s and "_f" in s]
Fluorine_list = [s for s in columnsHeaderFull_dose_Binary.values() if "F" in s and "_f" in s]
Neon_list = [s for s in columnsHeaderFull_dose_Binary.values() if "Ne" in s and "_f" in s]
Sodium_list = [s for s in columnsHeaderFull_dose_Binary.values() if "Na" in s and "_f" in s]
Magnesium_list = [s for s in columnsHeaderFull_dose_Binary.values() if "Mg" in s and "_f" in s]
Hydrogen_dose_Binary = [0]*len(depthX_dose_Binary)
Helium_dose_Binary = [0]*len(depthX_dose_Binary)
Lithium_dose_Binary = [0]*len(depthX_dose_Binary)
Beryllium_dose_Binary = [0]*len(depthX_dose_Binary)
Borum_dose_Binary = [0]*len(depthX_dose_Binary)
Carbon_dose_Binary = [0]*len(depthX_dose_Binary)
Nitrogen_dose_Binary = [0]*len(depthX_dose_Binary)
Oxygen_dose_Binary = [0]*len(depthX_dose_Binary)
Fluorine_dose_Binary = [0]*len(depthX_dose_Binary)
Neon_dose_Binary = [0]*len(depthX_dose_Binary)
Sodium_dose_Binary = [0]*len(depthX_dose_Binary)
Magnesium_dose_Binary = [0]*len(depthX_dose_Binary)
for i in range(3,numberOfColumns_dose_Binary,2):
    if columnsHeaderFull_dose_Binary[i] in Hydrogen_list:
        Hydrogen_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Helium_list:
        Helium_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Lithium_list:
        Lithium_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Beryllium_list:
        Beryllium_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Borum_list:
        Borum_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Carbon_list:
        Carbon_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Nitrogen_list:
        Nitrogen_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Oxygen_list:
        Oxygen_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Fluorine_list:
        Fluorine_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Neon_list:
        Neon_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Sodium_list:
        Sodium_dose_Binary += columnsContentFull_dose_Binary[i]
    if columnsHeaderFull_dose_Binary[i] in Magnesium_list:
        Magnesium_dose_Binary += columnsContentFull_dose_Binary[i]


# plot of the first four elements: H, He, Li and Be
fig, ax = plt.subplots(2,2, figsize = (14,10))
plt.subplots_adjust(top=0.96, hspace=0.22)
# Hydrogen
color = 'tab:red'
ax1 = ax[0,0]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Hydrogen')
ax1.plot(depthX_Binary, LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Hydrogen_Binary, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Hydrogen_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Helium
wgt = [3.5]*len(depthX_dose_Binary)
color = 'tab:red'
ax1 = ax[0,1]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Helium')
ax1.plot(depthX_Binary, 3.5*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Helium_Binary, color=color)
ax1.text(31, 350, 'x3.5', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Helium_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Lithium
color = 'tab:red'
ax1 = ax[1,0]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Lithium')
ax1.plot(depthX_Binary, 10*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Lithium_Binary, color=color)
ax1.text(31, 1000, 'x10', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Lithium_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Beryllium
color = 'tab:red'
ax1 = ax[1,1]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Beryllium')
ax1.plot(depthX_Binary, 20*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Beryllium_Binary, color=color)
ax1.text(31, 2000, 'x20', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Beryllium_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

plt.show()

# plot of the first four elements: B, C, N and O
#
fig, ax = plt.subplots(2,2, figsize = (14,10))
plt.subplots_adjust(top=0.96, hspace=0.22)
# Borum
color = 'tab:red'
ax1 = ax[0,0]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Borum')
ax1.text(31, 4000, 'x40', color=color)
ax1.plot(depthX_Binary, 40*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Borum_Binary, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Borum_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Carbon
color = 'tab:red'
ax1 = ax[0,1]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Carbon')
ax1.plot(depthX_Binary, 55*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Carbon_Binary, color=color)
ax1.text(31, 5500, 'x55', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Carbon_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Nitrogen
color = 'tab:red'
ax1 = ax[1,0]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Nitrogen')
ax1.plot(depthX_Binary, 60*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Nitrogen_Binary, color=color)
ax1.text(31, 6000, 'x60', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Nitrogen_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Oxygen
color = 'tab:red'
ax1 = ax[1,1]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Oxygen')
ax1.plot(depthX_Binary, 60*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Oxygen_Binary, color=color)
ax1.text(31, 6000, 'x60', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Oxygen_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

plt.show()


# plot of the first four elements: F, Ne, Na and Mg
#
fig, ax = plt.subplots(2,2, figsize = (14,10))
plt.subplots_adjust(top=0.96, hspace=0.22)
# Fluorine
color = 'tab:red'
ax1 = ax[0,0]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Fluorine')
ax1.text(31, 7000, 'x70', color=color)
ax1.plot(depthX_Binary, 70*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Fluorine_Binary, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Fluorine_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Neon
color = 'tab:red'
ax1 = ax[0,1]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Neon')
ax1.plot(depthX_Binary, 55*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Neon_Binary, color=color)
ax1.text(31, 5500, 'x55', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Neon_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)
print(Neon_dose_Binary)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Sodium
color = 'tab:red'
ax1 = ax[1,0]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Sodium')
ax1.plot(depthX_Binary, 20*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Sodium_Binary, color=color)
ax1.text(31, 2000, 'x20', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Sodium_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

# Magnesium
color = 'tab:red'
ax1 = ax[1,1]
ax1.set_xlabel('Depth in water [ mm ]')
ax1.set_ylabel('LET [ keV/um ]', color=color)
ax1.set_title('Magnesium')
ax1.plot(depthX_Binary, 20*LET_Dose_Total_Binary, color='m')
ax1.plot(depthX_Binary, Magnesium_Binary, color=color)
ax1.text(31, 2000, 'x20', color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Fluence [ # of particles ]', color=color)  # we already handled the x-label with ax1
ax2.plot(depthX_dose_Binary, Magnesium_dose_Binary, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped

plt.show()